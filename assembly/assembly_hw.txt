section	.text
	global _start       ;must be declared for using gcc
_start:                     ;tell linker entry point
	; move the data from memory into registers
	mov eax, [num1] ;brackets to get the actual value, not location
	mov ebx, [num2]
	; add the data
	add eax, ebx ;adds the values and stores in register a
	
	mov ebx, [num3] ;replace reg b with third value
	add eax, ebx ;add third value to the sum of first two values
	
	add eax, '0' ;forces int to string conversion
	
	mov [result], eax ;storing value in the result variable
	
	; prints the message
	mov	edx, len    ;message length
	mov	ecx, msg    ;message to write
	mov	ebx, 1	    ;file descriptor (stdout)
	mov	eax, 4	    ;system call number (sys_write)
	int	0x80        ;call kernel
	
	; printing the value
	mov edx, 1
	mov ecx, result
	mov ebx, 1
	mov eax, 4
	int	0x80 
	
	mov	eax, 1	    ;system call number (sys_exit)
	int	0x80        ;call kernel

section	.data ;constants and the like

msg	db	'The result is',0xa	;our dear string
len	equ	$ - msg			;length of our dear string
num1 db 3 ;varname definebyte value
num2 db 4
num3 db 1

section .bss 
result resb 1 ;reserve a spot for the result, taking up one byte

